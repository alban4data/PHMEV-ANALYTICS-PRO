"""
üè• PHMEV Analytics Pro - Version BigQuery
Application d'analyse des donn√©es pharmaceutiques PHMEV avec Google BigQuery
Version compl√®te identique √† la classique mais optimis√©e cloud
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import os
from datetime import datetime
from google.cloud import bigquery
from google.oauth2 import service_account
import json

# Configuration de la page
st.set_page_config(
    page_title="üè• PHMEV Analytics Pro - BigQuery",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS moderne identique √† la version classique
st.markdown("""
<style>
.main-header {
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 10px;
    color: white;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.main-header h1 {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 700;
}

.main-header p {
    margin: 0.5rem 0 0 0;
    font-size: 1.1rem;
    opacity: 0.9;
}

.kpi-container {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    padding: 1.5rem;
    border-radius: 12px;
    border-left: 5px solid #667eea;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    margin: 1rem 0;
    transition: transform 0.2s ease;
}

.kpi-container:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.15);
}

.kpi-value {
    font-size: 2.5rem;
    font-weight: bold;
    color: #667eea;
    margin: 0;
    line-height: 1;
}

.kpi-label {
    color: #666;
    font-size: 1rem;
    margin-top: 0.5rem;
    font-weight: 500;
}

.metric-card {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    padding: 1.5rem;
    border-radius: 12px;
    text-align: center;
    margin: 0.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.filter-section {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    border-left: 3px solid #667eea;
}

.stDataFrame {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

[data-testid="stDataFrame"] {
    background-color: white !important;
}

[data-testid="stDataFrame"] table {
    background-color: white !important;
    color: black !important;
    font-size: 0.9rem;
}

[data-testid="stDataFrame"] th {
    background-color: #667eea !important;
    color: white !important;
    font-weight: bold !important;
    padding: 12px 8px !important;
    text-align: center !important;
}

[data-testid="stDataFrame"] td {
    background-color: white !important;
    color: black !important;
    padding: 10px 8px !important;
    border-bottom: 1px solid #e9ecef !important;
}

[data-testid="stDataFrame"] tr:nth-child(even) td {
    background-color: #f8f9fa !important;
}

[data-testid="stDataFrame"] tr:hover td {
    background-color: #e3f2fd !important;
}

.stSelectbox > div > div {
    background-color: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
}

.stMultiSelect > div > div {
    background-color: white;
    border: 2px solid #e9ecef;
    border-radius: 8px;
}

.stButton > button {
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
}

.stButton > button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

.info-box {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #2196f3;
    margin: 1rem 0;
}

.warning-box {
    background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #ff9800;
    margin: 1rem 0;
}

.success-box {
    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #4caf50;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

# Fonctions utilitaires
def format_number(value):
    """Format un nombre avec s√©parateurs fran√ßais"""
    if pd.isna(value) or value == 0:
        return "0"
    
    if value >= 1_000_000:
        return f"{value/1_000_000:.1f}M"
    elif value >= 1_000:
        return f"{value/1_000:.0f}K"
    else:
        return f"{value:.0f}"

def format_currency(value):
    """Format une valeur mon√©taire en euros"""
    if pd.isna(value) or value == 0:
        return "0,00‚Ç¨"
    
    if value >= 1_000_000:
        return f"{value/1_000_000:.1f}M‚Ç¨"
    elif value >= 1_000:
        return f"{value/1_000:.0f}K‚Ç¨"
    else:
        return f"{value:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.')

def format_percentage(value):
    """Format un pourcentage"""
    if pd.isna(value):
        return "0.0%"
    return f"{value:.1f}%"

def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration si BigQuery n'est pas accessible"""
    np.random.seed(42)
    n_rows = 50000  # √âchantillon plus r√©aliste pour d√©mo
    
    # Listes de donn√©es r√©alistes
    etablissements = [
        "CHU de Lyon", "H√¥pital Saint-Antoine", "Clinique des Lilas",
        "CHR de Lille", "H√¥pital Europ√©en", "Clinique du Parc"
    ] * 100
    
    medicaments = [
        "Cabometyx", "Keytruda", "Opdivo", "Tecfidera", "Humira"
    ] * 100
    
    villes = ["Paris", "Lyon", "Marseille", "Toulouse", "Nice"] * 100
    categories = ["CHU", "CHR", "Clinique Priv√©e"] * 100
    
    # G√©n√©rer les donn√©es
    data = {
        'etablissement': np.random.choice(etablissements, n_rows),
        'medicament': np.random.choice(medicaments, n_rows),
        'ville': np.random.choice(villes, n_rows),
        'categorie': np.random.choice(categories, n_rows),
        'BOITES': np.random.exponential(50, n_rows).astype(int) + 1,
        'REM': np.random.exponential(5000, n_rows),
        'BSE': np.random.exponential(6000, n_rows),
        'atc1': np.random.choice(['A', 'B', 'C', 'D', 'G'], n_rows),
        'L_ATC1': np.random.choice([
            'Syst√®me digestif', 'Sang et organes', 'Syst√®me cardiovasculaire'
        ], n_rows),
        'L_ATC5': np.random.choice(medicaments, n_rows)
    }
    
    df = pd.DataFrame(data)
    df['cout_par_boite'] = df['REM'] / df['BOITES']
    df['taux_remboursement'] = (df['REM'] / df['BSE']) * 100
    df = df.replace([np.inf, -np.inf], 0).fillna(0)
    
    return df

# Configuration BigQuery
@st.cache_resource
def init_bigquery():
    """üîó Initialise la connexion BigQuery"""
    try:
        # Essayer d'abord avec les secrets Streamlit
        if "gcp_service_account" in st.secrets:
            credentials_info = st.secrets["gcp_service_account"]
            credentials = service_account.Credentials.from_service_account_info(credentials_info)
            client = bigquery.Client(credentials=credentials, project=credentials_info["project_id"])
            return client, credentials_info["project_id"]
        
        # Fallback pour d√©veloppement local
        else:
            # Utiliser les credentials par d√©faut (gcloud auth application-default login)
            client = bigquery.Client(project='test-db-473321')
            return client, 'test-db-473321'
            
    except Exception as e:
        st.error(f"‚ùå Erreur de connexion BigQuery: {e}")
        return None, None

@st.cache_data(ttl=3600)  # Cache 1 heure
def get_filter_options_bigquery():
    """üéõÔ∏è R√©cup√®re les options de filtres depuis BigQuery (optimis√©)"""
    client, project_id = init_bigquery()
    
    if not client:
        return {}
    
    try:
        # Requ√™te ultra-optimis√©e avec LIMIT pour le chargement initial
        query = f"""
        SELECT DISTINCT
            atc1, l_atc1,
            COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e') as ville,
            COALESCE(NULLIF(categorie_jur, ''), 'Non sp√©cifi√©e') as categorie,
            COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©') as etablissement,
            COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') as medicament
        FROM `{project_id}.dataset.PHMEV2024`
        WHERE l_cip13 NOT IN ('Non restitu√©', 'Non sp√©cifi√©', 'Honoraires de dispensation')
        AND l_cip13 IS NOT NULL
        LIMIT 50000
        """
        
        df_options = client.query(query).to_dataframe()
        
        # Construire les options de filtres (optimis√©)
        options = {
            'atc1': sorted([(row['atc1'], row['l_atc1']) for _, row in df_options[['atc1', 'l_atc1']].dropna().drop_duplicates().iterrows()]),
            'villes': sorted(df_options['ville'].dropna().unique().tolist()),
            'categories': sorted(df_options['categorie'].dropna().unique().tolist()),
            'etablissements': sorted(df_options['etablissement'].dropna().unique().tolist()),
            'medicaments': sorted(df_options['medicament'].dropna().unique().tolist())
        }
        
        return options
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©cup√©ration des options: {e}")
        return {}

def get_top_etablissements_bigquery(filters, limit=50):
    """üè• R√©cup√®re le TOP N √©tablissements directement depuis BigQuery"""
    client, project_id = init_bigquery()
    
    if not client:
        return pd.DataFrame()
    
    try:
        # Construire la clause WHERE
        where_conditions = [
            "l_cip13 NOT IN ('Non restitu√©', 'Non sp√©cifi√©', 'Honoraires de dispensation')",
            "l_cip13 IS NOT NULL"
        ]
        
        # Ajouter les filtres
        if filters.get('atc1'):
            atc1_list = "', '".join(filters['atc1'])
            where_conditions.append(f"atc1 IN ('{atc1_list}')")
        
        if filters.get('villes'):
            villes_list = "', '".join(filters['villes'])
            where_conditions.append(f"COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e') IN ('{villes_list}')")
        
        if filters.get('categories'):
            cat_list = "', '".join(filters['categories'])
            where_conditions.append(f"COALESCE(NULLIF(categorie_jur, ''), 'Non sp√©cifi√©e') IN ('{cat_list}')")
        
        if filters.get('etablissements'):
            etab_list = "', '".join(filters['etablissements'])
            where_conditions.append(f"COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©') IN ('{etab_list}')")
        
        if filters.get('medicaments'):
            med_list = "', '".join(filters['medicaments'])
            where_conditions.append(f"COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') IN ('{med_list}')")
        
        if filters.get('min_boites', 0) > 0:
            where_conditions.append(f"BOITES >= {filters['min_boites']}")
        
        where_clause = " AND ".join(where_conditions)
        
        # Requ√™te agr√©g√©e pour TOP √©tablissements
        query = f"""
        SELECT 
            COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©') as etablissement,
            COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e') as ville,
            COALESCE(NULLIF(categorie_jur, ''), 'Non sp√©cifi√©e') as categorie,
            SUM(REM) as REM,
            SUM(BSE) as BSE,
            SUM(BOITES) as BOITES,
            COUNT(*) as nb_lignes,
            SUM(REM) / SUM(BOITES) as cout_par_boite,
            (SUM(REM) / SUM(BSE)) * 100 as taux_remboursement
        FROM `{project_id}.dataset.PHMEV2024`
        WHERE {where_clause}
        GROUP BY etablissement, ville, categorie
        ORDER BY REM DESC
        LIMIT {limit}
        """
        
        return client.query(query).to_dataframe()
        
    except Exception as e:
        st.error(f"‚ùå Erreur BigQuery √©tablissements: {e}")
        return pd.DataFrame()

def get_top_medicaments_bigquery(filters, limit=50):
    """üíä R√©cup√®re le TOP N m√©dicaments directement depuis BigQuery"""
    client, project_id = init_bigquery()
    
    if not client:
        return pd.DataFrame()
    
    try:
        # Construire la clause WHERE (m√™me logique)
        where_conditions = [
            "l_cip13 NOT IN ('Non restitu√©', 'Non sp√©cifi√©', 'Honoraires de dispensation')",
            "l_cip13 IS NOT NULL"
        ]
        
        # Ajouter les filtres
        if filters.get('atc1'):
            atc1_list = "', '".join(filters['atc1'])
            where_conditions.append(f"atc1 IN ('{atc1_list}')")
        
        if filters.get('villes'):
            villes_list = "', '".join(filters['villes'])
            where_conditions.append(f"COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e') IN ('{villes_list}')")
        
        if filters.get('categories'):
            cat_list = "', '".join(filters['categories'])
            where_conditions.append(f"COALESCE(NULLIF(categorie_jur, ''), 'Non sp√©cifi√©e') IN ('{cat_list}')")
        
        if filters.get('etablissements'):
            etab_list = "', '".join(filters['etablissements'])
            where_conditions.append(f"COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©') IN ('{etab_list}')")
        
        if filters.get('medicaments'):
            med_list = "', '".join(filters['medicaments'])
            where_conditions.append(f"COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') IN ('{med_list}')")
        
        if filters.get('min_boites', 0) > 0:
            where_conditions.append(f"BOITES >= {filters['min_boites']}")
        
        where_clause = " AND ".join(where_conditions)
        
        # Requ√™te agr√©g√©e pour TOP m√©dicaments
        query = f"""
        SELECT 
            COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') as medicament,
            atc1, l_atc1,
            SUM(REM) as REM,
            SUM(BSE) as BSE,
            SUM(BOITES) as BOITES,
            COUNT(DISTINCT COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©')) as nb_etablissements,
            SUM(REM) / SUM(BOITES) as cout_par_boite,
            (SUM(REM) / SUM(BSE)) * 100 as taux_remboursement
        FROM `{project_id}.dataset.PHMEV2024`
        WHERE {where_clause}
        GROUP BY medicament, atc1, l_atc1
        ORDER BY REM DESC
        LIMIT {limit}
        """
        
        return client.query(query).to_dataframe()
        
    except Exception as e:
        st.error(f"‚ùå Erreur BigQuery m√©dicaments: {e}")
        return pd.DataFrame()

def get_top_molecules_bigquery(filters, limit=50):
    """üß¨ R√©cup√®re le TOP N mol√©cules directement depuis BigQuery"""
    client, project_id = init_bigquery()
    
    if not client:
        return pd.DataFrame()
    
    try:
        # Construire la clause WHERE (m√™me logique)
        where_conditions = [
            "l_cip13 NOT IN ('Non restitu√©', 'Non sp√©cifi√©', 'Honoraires de dispensation')",
            "l_cip13 IS NOT NULL"
        ]
        
        # Ajouter les filtres
        if filters.get('atc1'):
            atc1_list = "', '".join(filters['atc1'])
            where_conditions.append(f"atc1 IN ('{atc1_list}')")
        
        if filters.get('villes'):
            villes_list = "', '".join(filters['villes'])
            where_conditions.append(f"COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e') IN ('{villes_list}')")
        
        if filters.get('categories'):
            cat_list = "', '".join(filters['categories'])
            where_conditions.append(f"COALESCE(NULLIF(categorie_jur, ''), 'Non sp√©cifi√©e') IN ('{cat_list}')")
        
        if filters.get('etablissements'):
            etab_list = "', '".join(filters['etablissements'])
            where_conditions.append(f"COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©') IN ('{etab_list}')")
        
        if filters.get('medicaments'):
            med_list = "', '".join(filters['medicaments'])
            where_conditions.append(f"COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') IN ('{med_list}')")
        
        if filters.get('min_boites', 0) > 0:
            where_conditions.append(f"BOITES >= {filters['min_boites']}")
        
        where_clause = " AND ".join(where_conditions)
        
        # Requ√™te agr√©g√©e pour TOP mol√©cules (utilise L_ATC5 comme mol√©cule)
        query = f"""
        SELECT 
            COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') as molecule,
            atc1, l_atc1,
            SUM(REM) as REM,
            SUM(BSE) as BSE,
            SUM(BOITES) as BOITES,
            COUNT(DISTINCT COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©')) as nb_etablissements,
            SUM(REM) / SUM(BOITES) as cout_par_boite,
            (SUM(REM) / SUM(BSE)) * 100 as taux_remboursement
        FROM `{project_id}.dataset.PHMEV2024`
        WHERE {where_clause}
        GROUP BY molecule, atc1, l_atc1
        ORDER BY REM DESC
        LIMIT {limit}
        """
        
        return client.query(query).to_dataframe()
        
    except Exception as e:
        st.error(f"‚ùå Erreur BigQuery mol√©cules: {e}")
        return pd.DataFrame()

def get_kpis_bigquery(filters):
    """üìä R√©cup√®re les KPIs directement depuis BigQuery"""
    client, project_id = init_bigquery()
    
    if not client:
        return {}
    
    try:
        # Construire la clause WHERE (m√™me logique)
        where_conditions = [
            "l_cip13 NOT IN ('Non restitu√©', 'Non sp√©cifi√©', 'Honoraires de dispensation')",
            "l_cip13 IS NOT NULL"
        ]
        
        # Ajouter les filtres
        if filters.get('atc1'):
            atc1_list = "', '".join(filters['atc1'])
            where_conditions.append(f"atc1 IN ('{atc1_list}')")
        
        if filters.get('villes'):
            villes_list = "', '".join(filters['villes'])
            where_conditions.append(f"COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e') IN ('{villes_list}')")
        
        if filters.get('categories'):
            cat_list = "', '".join(filters['categories'])
            where_conditions.append(f"COALESCE(NULLIF(categorie_jur, ''), 'Non sp√©cifi√©e') IN ('{cat_list}')")
        
        if filters.get('etablissements'):
            etab_list = "', '".join(filters['etablissements'])
            where_conditions.append(f"COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©') IN ('{etab_list}')")
        
        if filters.get('medicaments'):
            med_list = "', '".join(filters['medicaments'])
            where_conditions.append(f"COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©') IN ('{med_list}')")
        
        if filters.get('min_boites', 0) > 0:
            where_conditions.append(f"BOITES >= {filters['min_boites']}")
        
        where_clause = " AND ".join(where_conditions)
        
        # Requ√™te pour KPIs
        query = f"""
        SELECT 
            COUNT(*) as total_lignes,
            SUM(REM) as total_rem,
            SUM(BSE) as total_bse,
            SUM(BOITES) as total_boites,
            COUNT(DISTINCT COALESCE(NULLIF(nom_etb, ''), NULLIF(raison_sociale_etb, ''), 'Non sp√©cifi√©')) as nb_etablissements,
            COUNT(DISTINCT COALESCE(NULLIF(L_ATC5, ''), 'Non sp√©cifi√©')) as nb_medicaments,
            COUNT(DISTINCT COALESCE(NULLIF(nom_ville, ''), 'Non sp√©cifi√©e')) as nb_villes,
            AVG(CASE WHEN BOITES > 0 THEN REM / BOITES ELSE 0 END) as cout_moyen_boite
        FROM `{project_id}.dataset.PHMEV2024`
        WHERE {where_clause}
        """
        
        result = client.query(query).to_dataframe()
        if len(result) > 0:
            return result.iloc[0].to_dict()
        return {}
        
    except Exception as e:
        st.error(f"‚ùå Erreur BigQuery KPIs: {e}")
        return {}

@st.cache_data
def get_all_filter_options(df):
    """R√©cup√®re toutes les options de filtres disponibles"""
    if df is None or len(df) == 0:
        return {}
    
    def safe_sort_atc_items(items):
        """Tri s√©curis√© pour les codes ATC mixtes"""
        try:
            return sorted(items, key=lambda x: (str(x[0]), str(x[1])))
        except:
            return sorted([(str(k), str(v)) for k, v in items])
    
    return {
        'atc1': safe_sort_atc_items(df[['atc1', 'l_atc1']].drop_duplicates().set_index('atc1')['l_atc1'].dropna().to_dict().items()) if 'l_atc1' in df.columns else [],
        'atc2': safe_sort_atc_items(df[['atc2', 'L_ATC2']].drop_duplicates().set_index('atc2')['L_ATC2'].dropna().to_dict().items()) if 'atc2' in df.columns and 'L_ATC2' in df.columns else [],
        'atc3': safe_sort_atc_items(df[['atc3', 'L_ATC3']].drop_duplicates().set_index('atc3')['L_ATC3'].dropna().to_dict().items()) if 'atc3' in df.columns and 'L_ATC3' in df.columns else [],
        'atc4': safe_sort_atc_items(df[['atc4', 'L_ATC4']].drop_duplicates().set_index('atc4')['L_ATC4'].dropna().to_dict().items()) if 'atc4' in df.columns and 'L_ATC4' in df.columns else [],
        'atc5': safe_sort_atc_items(df[['ATC5', 'L_ATC5']].drop_duplicates().set_index('ATC5')['L_ATC5'].dropna().to_dict().items()) if 'ATC5' in df.columns else [],
        'villes': sorted([str(x) for x in df['ville'].dropna().unique()]),
        'categories': sorted([str(x) for x in df['categorie'].dropna().unique()]),
        'etablissements': sorted([str(x) for x in df['etablissement'].dropna().unique()]),
        'medicaments': sorted([str(x) for x in df['medicament'].dropna().unique()])
    }

def get_available_options(df_filtered, column_mapping):
    """R√©cup√®re les options disponibles selon les filtres appliqu√©s"""
    if df_filtered is None or len(df_filtered) == 0:
        return []
    
    try:
        code_col, label_col = column_mapping
        if code_col not in df_filtered.columns or label_col not in df_filtered.columns:
            return []
        
        # Filtrer les valeurs non informatives
        df_clean = df_filtered[
            (df_filtered[code_col].notna()) & 
            (df_filtered[label_col].notna()) &
            (~df_filtered[code_col].isin(['', 'Non restitu√©', 'Non sp√©cifi√©'])) &
            (~df_filtered[label_col].isin(['', 'Non restitu√©', 'Non sp√©cifi√©']))
        ]
        
        if len(df_clean) == 0:
            return []
        
        # Cr√©er le dictionnaire et trier
        items = df_clean[[code_col, label_col]].drop_duplicates().set_index(code_col)[label_col].to_dict().items()
        return sorted(items, key=lambda x: (str(x[0]), str(x[1])))
        
    except Exception as e:
        st.error(f"Erreur dans get_available_options: {e}")
        return []

# Fonction apply_filters supprim√©e - remplac√©e par load_filtered_data_bigquery

def main():
    """Application principale"""
    
    # En-t√™te
    st.markdown("""
    <div class="main-header">
        <h1>üè• PHMEV Analytics Pro - BigQuery Edition</h1>
        <p>Analyse compl√®te des donn√©es pharmaceutiques PHMEV</p>
        <p><small>‚ö° Powered by Google BigQuery - Performance maximale</small></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Chargement des options de filtres (une seule fois)
    with st.spinner("üöÄ Connexion √† BigQuery et r√©cup√©ration des filtres..."):
        filter_options = get_filter_options_bigquery()
    
    if not filter_options:
        st.error("‚ùå Impossible de charger les options depuis BigQuery")
        st.info("V√©rifiez la configuration des credentials dans les secrets Streamlit")
        return
    
    # Initialisation des filtres dans session_state
    if 'filters' not in st.session_state:
        st.session_state.filters = {}
    
    # Sidebar - Filtres hi√©rarchiques identiques √† la version classique
    st.sidebar.header("üéõÔ∏è Filtres Hi√©rarchiques")
    
    # Filtre ATC1 (simplifi√©)
    st.sidebar.subheader("üß¨ Classification Th√©rapeutique")
    atc1_options = filter_options.get('atc1', [])
    selected_atc1 = st.sidebar.multiselect(
        "ATC Niveau 1", 
        options=[code for code, label in atc1_options],
        format_func=lambda x: f"{x} - {dict(atc1_options).get(x, x)}",
        key="atc1_filter",
        help="Classification th√©rapeutique anatomique niveau 1"
    )
    st.session_state.filters['atc1'] = selected_atc1
    
    # Autres filtres
    st.sidebar.subheader("üè• Filtres G√©ographiques & Organisationnels")
    
    # Filtre Villes
    ville_options = filter_options.get('villes', [])
    selected_villes = st.sidebar.multiselect(
        "üèôÔ∏è Villes", 
        options=ville_options,
        key="villes_filter"
    )
    st.session_state.filters['villes'] = selected_villes
    
    # Filtre Cat√©gories
    cat_options = filter_options.get('categories', [])
    selected_categories = st.sidebar.multiselect(
        "üè• Cat√©gories d'√âtablissements", 
        options=cat_options,
        key="categories_filter"
    )
    st.session_state.filters['categories'] = selected_categories
    
    # Filtre √âtablissements
    etab_options = filter_options.get('etablissements', [])
    selected_etablissements = st.sidebar.multiselect(
        "üè¢ √âtablissements", 
        options=etab_options,
        key="etablissements_filter"
    )
    st.session_state.filters['etablissements'] = selected_etablissements
    
    # Recherche de m√©dicaments
    st.sidebar.subheader("üíä Recherche de M√©dicaments")
    
    # Recherche par nom
    search_term = st.sidebar.text_input(
        "üîç Rechercher un m√©dicament", 
        placeholder="Ex: cabome, keytruda...",
        key="med_search"
    )
    
    # Filtrer les m√©dicaments selon la recherche
    med_options = filter_options.get('medicaments', [])
    if search_term:
        med_options = [med for med in med_options if search_term.lower() in med.lower()]
    
    selected_medicaments = st.sidebar.multiselect(
        "üíä M√©dicaments", 
        options=med_options,
        key="medicaments_filter",
        help=f"{'‚ùå Aucun m√©dicament trouv√© pour ' + repr(search_term) if search_term and not med_options else '‚úÖ ' + str(len(med_options)) + ' m√©dicaments disponibles'}"
    )
    st.session_state.filters['medicaments'] = selected_medicaments
    
    # Filtre nombre de bo√Ætes
    min_boites = st.sidebar.number_input(
        "üì¶ Nombre minimum de bo√Ætes", 
        min_value=0, 
        value=0,
        key="min_boites_filter",
        help="Filtrer par nombre minimum de bo√Ætes dispens√©es"
    )
    st.session_state.filters['min_boites'] = min_boites
    
    # Bouton reset
    if st.sidebar.button("üîÑ R√©initialiser tous les filtres"):
        for key in list(st.session_state.keys()):
            if key.endswith('_filter'):
                del st.session_state[key]
        st.session_state.filters = {}
        st.rerun()
    
    # Chargement des donn√©es filtr√©es depuis BigQuery
    with st.spinner("üìä Application des filtres dans BigQuery..."):
        df_filtered = load_filtered_data_bigquery(st.session_state.filters)
    
    # Affichage des informations de filtrage
    col_info1, col_info2 = st.columns(2)
    with col_info1:
        st.info(f"üìä **{len(df_filtered):,}** lignes trouv√©es")
    with col_info2:
        if st.session_state.filters:
            st.info(f"üéØ **Filtres actifs** - Donn√©es optimis√©es BigQuery")
    
    # KPIs principaux
    if len(df_filtered) > 0:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_rem = df_filtered['REM'].sum()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{format_currency(total_rem)}</div>
                <div class="kpi-label">üí∞ Montant Total Rembours√©</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            total_bse = df_filtered['BSE'].sum()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{format_currency(total_bse)}</div>
                <div class="kpi-label">üè¶ Base Remboursable Totale</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            total_boites = df_filtered['BOITES'].sum()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{format_number(total_boites)}</div>
                <div class="kpi-label">üì¶ Bo√Ætes Totales</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            taux_moyen = (df_filtered['REM'].sum() / df_filtered['BSE'].sum()) * 100 if df_filtered['BSE'].sum() > 0 else 0
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{format_percentage(taux_moyen)}</div>
                <div class="kpi-label">üìä Taux Remboursement Moyen</div>
            </div>
            """, unsafe_allow_html=True)
        
        # KPIs secondaires
        col5, col6, col7, col8 = st.columns(4)
        
        with col5:
            nb_etabs = df_filtered['etablissement'].nunique()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{nb_etabs}</div>
                <div class="kpi-label">üè• √âtablissements Uniques</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col6:
            nb_medicaments = df_filtered['medicament'].nunique()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{nb_medicaments}</div>
                <div class="kpi-label">üíä M√©dicaments Uniques</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col7:
            nb_villes = df_filtered['ville'].nunique()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{nb_villes}</div>
                <div class="kpi-label">üèôÔ∏è Villes Uniques</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col8:
            cout_moyen = df_filtered['cout_par_boite'].mean()
            st.markdown(f"""
            <div class="kpi-container">
                <div class="kpi-value">{format_currency(cout_moyen)}</div>
                <div class="kpi-label">üí∞ Co√ªt Moyen/Bo√Æte</div>
            </div>
            """, unsafe_allow_html=True)
    
    # Onglets pour les analyses (identiques √† la version classique)
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üè• √âtablissements", 
        "üíä M√©dicaments", 
        "üß¨ Mol√©cules", 
        "üèôÔ∏è G√©ographie", 
        "üìä Classifications", 
        "üìã Donn√©es D√©taill√©es"
    ])
    
    with tab1:
        st.subheader("üè• Analyse par √âtablissements")
        
        if len(df_filtered) > 0:
            # Agr√©gation par √©tablissement
            df_etabs = df_filtered.groupby(['etablissement', 'categorie', 'ville']).agg({
                'REM': 'sum',
                'BSE': 'sum',
                'BOITES': 'sum'
            }).reset_index()
            
            df_etabs['cout_par_boite'] = df_etabs['REM'] / df_etabs['BOITES']
            df_etabs['taux_remboursement'] = (df_etabs['REM'] / df_etabs['BSE']) * 100
            df_etabs = df_etabs.sort_values('REM', ascending=False)
            
            # Options d'affichage
            col_opt1, col_opt2 = st.columns(2)
            with col_opt1:
                nb_etabs = st.selectbox("Nombre d'√©tablissements √† afficher", [10, 20, 50, 100], index=1)
            with col_opt2:
                show_chart = st.checkbox("üìä Afficher le graphique", value=True)
            
            # Tableau
            df_etabs_display = df_etabs.head(nb_etabs).copy()
            
            # Formatage pour affichage
            df_etabs_display['REM'] = df_etabs_display['REM'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_etabs_display['BSE'] = df_etabs_display['BSE'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_etabs_display['cout_par_boite'] = df_etabs_display['cout_par_boite'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_etabs_display['taux_remboursement'] = df_etabs_display['taux_remboursement'].apply(lambda x: f"{x:.1f}%")
            df_etabs_display['BOITES'] = df_etabs_display['BOITES'].apply(lambda x: f"{x:,}".replace(',', ' '))
            
            df_etabs_display.columns = ['√âtablissement', 'Cat√©gorie', 'Ville', 'Montant Rembours√©', 'Base Remboursable', 'Bo√Ætes', 'Co√ªt/Bo√Æte', 'Taux Remb.']
            
            st.dataframe(df_etabs_display, use_container_width=True)
            
            # Graphique
            if show_chart:
                fig = px.bar(
                    df_etabs.head(15), 
                    x='REM', 
                    y='etablissement',
                    orientation='h',
                    title=f"Top 15 √âtablissements par Remboursement",
                    labels={'REM': 'Montant Rembours√© (‚Ç¨)', 'etablissement': '√âtablissement'},
                    color='REM',
                    color_continuous_scale='Blues'
                )
                fig.update_layout(height=600, yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig, use_container_width=True)
            
            # Export CSV
            csv_etabs = df_etabs_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger les donn√©es √©tablissements",
                data=csv_etabs,
                file_name=f"etablissements_phmev_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
        else:
            st.warning("Aucune donn√©e disponible avec les filtres s√©lectionn√©s")
    
    with tab2:
        st.subheader("üíä Analyse par M√©dicaments")
        
        if len(df_filtered) > 0:
            # Agr√©gation par m√©dicament
            df_meds = df_filtered.groupby(['medicament', 'L_ATC1']).agg({
                'REM': 'sum',
                'BSE': 'sum',
                'BOITES': 'sum'
            }).reset_index()
            
            df_meds['cout_par_boite'] = df_meds['REM'] / df_meds['BOITES']
            df_meds['taux_remboursement'] = (df_meds['REM'] / df_meds['BSE']) * 100
            df_meds = df_meds.sort_values('REM', ascending=False)
            
            # Options d'affichage
            col_opt1, col_opt2 = st.columns(2)
            with col_opt1:
                nb_meds = st.selectbox("Nombre de m√©dicaments √† afficher", [10, 20, 50, 100], index=1, key="nb_meds")
            with col_opt2:
                show_chart_meds = st.checkbox("üìä Afficher le graphique", value=True, key="chart_meds")
            
            # Tableau
            df_meds_display = df_meds.head(nb_meds).copy()
            
            # Formatage pour affichage
            df_meds_display['REM'] = df_meds_display['REM'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_meds_display['BSE'] = df_meds_display['BSE'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_meds_display['cout_par_boite'] = df_meds_display['cout_par_boite'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_meds_display['taux_remboursement'] = df_meds_display['taux_remboursement'].apply(lambda x: f"{x:.1f}%")
            df_meds_display['BOITES'] = df_meds_display['BOITES'].apply(lambda x: f"{x:,}".replace(',', ' '))
            
            df_meds_display.columns = ['M√©dicament', 'Classification ATC1', 'Montant Rembours√©', 'Base Remboursable', 'Bo√Ætes', 'Co√ªt/Bo√Æte', 'Taux Remb.']
            
            st.dataframe(df_meds_display, use_container_width=True)
            
            # Graphique
            if show_chart_meds:
                fig = px.bar(
                    df_meds.head(15), 
                    x='REM', 
                    y='medicament',
                    orientation='h',
                    title=f"Top 15 M√©dicaments par Remboursement",
                    labels={'REM': 'Montant Rembours√© (‚Ç¨)', 'medicament': 'M√©dicament'},
                    color='REM',
                    color_continuous_scale='Viridis'
                )
                fig.update_layout(height=600, yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig, use_container_width=True)
            
            # Export CSV
            csv_meds = df_meds_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger les donn√©es m√©dicaments",
                data=csv_meds,
                file_name=f"medicaments_phmev_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                key="download_meds"
            )
        else:
            st.warning("Aucune donn√©e disponible avec les filtres s√©lectionn√©s")
    
    with tab3:
        st.subheader("üß¨ Analyse par Mol√©cules/Principes Actifs")
        
        if len(df_filtered) > 0 and 'L_ATC5' in df_filtered.columns:
            # Agr√©gation par mol√©cule (L_ATC5)
            df_molecules = df_filtered.groupby(['L_ATC5', 'L_ATC1']).agg({
                'REM': 'sum',
                'BSE': 'sum',
                'BOITES': 'sum'
            }).reset_index()
            
            df_molecules['cout_par_boite'] = df_molecules['REM'] / df_molecules['BOITES']
            df_molecules['taux_remboursement'] = (df_molecules['REM'] / df_molecules['BSE']) * 100
            df_molecules = df_molecules.sort_values('REM', ascending=False)
            
            # Options d'affichage
            col_opt1, col_opt2 = st.columns(2)
            with col_opt1:
                nb_molecules = st.selectbox("Nombre de mol√©cules √† afficher", [10, 20, 50, 100], index=1, key="nb_molecules")
            with col_opt2:
                show_chart_molecules = st.checkbox("üìä Afficher le graphique", value=True, key="chart_molecules")
            
            # Tableau
            df_molecules_display = df_molecules.head(nb_molecules).copy()
            
            # Formatage pour affichage
            df_molecules_display['REM'] = df_molecules_display['REM'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_molecules_display['BSE'] = df_molecules_display['BSE'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_molecules_display['cout_par_boite'] = df_molecules_display['cout_par_boite'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_molecules_display['taux_remboursement'] = df_molecules_display['taux_remboursement'].apply(lambda x: f"{x:.1f}%")
            df_molecules_display['BOITES'] = df_molecules_display['BOITES'].apply(lambda x: f"{x:,}".replace(',', ' '))
            
            df_molecules_display.columns = ['Mol√©cule/Principe Actif', 'Classification ATC1', 'Montant Rembours√©', 'Base Remboursable', 'Bo√Ætes', 'Co√ªt/Bo√Æte', 'Taux Remb.']
            
            st.dataframe(df_molecules_display, use_container_width=True)
            
            # Graphique
            if show_chart_molecules:
                fig = px.bar(
                    df_molecules.head(15), 
                    x='REM', 
                    y='L_ATC5',
                    orientation='h',
                    title=f"Top 15 Mol√©cules par Remboursement",
                    labels={'REM': 'Montant Rembours√© (‚Ç¨)', 'L_ATC5': 'Mol√©cule'},
                    color='REM',
                    color_continuous_scale='Plasma'
                )
                fig.update_layout(height=600, yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig, use_container_width=True)
            
            # Export CSV
            csv_molecules = df_molecules_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger les donn√©es mol√©cules",
                data=csv_molecules,
                file_name=f"molecules_phmev_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                key="download_molecules"
            )
        else:
            st.warning("Aucune donn√©e de mol√©cules disponible avec les filtres s√©lectionn√©s")
    
    with tab4:
        st.subheader("üèôÔ∏è Analyse G√©ographique")
        
        if len(df_filtered) > 0:
            # Agr√©gation par ville et r√©gion
            df_geo = df_filtered.groupby(['ville', 'region']).agg({
                'REM': 'sum',
                'BSE': 'sum',
                'BOITES': 'sum',
                'etablissement': 'nunique'
            }).reset_index()
            
            df_geo['cout_par_boite'] = df_geo['REM'] / df_geo['BOITES']
            df_geo['taux_remboursement'] = (df_geo['REM'] / df_geo['BSE']) * 100
            df_geo = df_geo.sort_values('REM', ascending=False)
            
            # Options d'affichage
            col_opt1, col_opt2 = st.columns(2)
            with col_opt1:
                nb_villes_geo = st.selectbox("Nombre de villes √† afficher", [10, 20, 50, 100], index=1, key="nb_villes_geo")
            with col_opt2:
                show_chart_geo = st.checkbox("üìä Afficher le graphique", value=True, key="chart_geo")
            
            # Tableau
            df_geo_display = df_geo.head(nb_villes_geo).copy()
            
            # Formatage pour affichage
            df_geo_display['REM'] = df_geo_display['REM'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_geo_display['BSE'] = df_geo_display['BSE'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_geo_display['cout_par_boite'] = df_geo_display['cout_par_boite'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_geo_display['taux_remboursement'] = df_geo_display['taux_remboursement'].apply(lambda x: f"{x:.1f}%")
            df_geo_display['BOITES'] = df_geo_display['BOITES'].apply(lambda x: f"{x:,}".replace(',', ' '))
            
            df_geo_display.columns = ['Ville', 'R√©gion', 'Montant Rembours√©', 'Base Remboursable', 'Bo√Ætes', 'Nb √âtablissements', 'Co√ªt/Bo√Æte', 'Taux Remb.']
            
            st.dataframe(df_geo_display, use_container_width=True)
            
            # Graphique
            if show_chart_geo:
                fig = px.bar(
                    df_geo.head(15), 
                    x='REM', 
                    y='ville',
                    orientation='h',
                    title=f"Top 15 Villes par Remboursement",
                    labels={'REM': 'Montant Rembours√© (‚Ç¨)', 'ville': 'Ville'},
                    color='etablissement',
                    color_continuous_scale='Oranges'
                )
                fig.update_layout(height=600, yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig, use_container_width=True)
            
            # Export CSV
            csv_geo = df_geo_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger les donn√©es g√©ographiques",
                data=csv_geo,
                file_name=f"geographie_phmev_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                key="download_geo"
            )
        else:
            st.warning("Aucune donn√©e g√©ographique disponible avec les filtres s√©lectionn√©s")
    
    with tab5:
        st.subheader("üìä Analyse par Classifications ATC")
        
        if len(df_filtered) > 0:
            # Analyse par ATC1
            st.write("### Classification ATC Niveau 1")
            df_atc1 = df_filtered.groupby(['atc1', 'L_ATC1']).agg({
                'REM': 'sum',
                'BSE': 'sum',
                'BOITES': 'sum'
            }).reset_index()
            
            df_atc1['cout_par_boite'] = df_atc1['REM'] / df_atc1['BOITES']
            df_atc1['taux_remboursement'] = (df_atc1['REM'] / df_atc1['BSE']) * 100
            df_atc1 = df_atc1.sort_values('REM', ascending=False)
            
            # Formatage pour affichage
            df_atc1_display = df_atc1.copy()
            df_atc1_display['REM'] = df_atc1_display['REM'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_atc1_display['BSE'] = df_atc1_display['BSE'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_atc1_display['cout_par_boite'] = df_atc1_display['cout_par_boite'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            df_atc1_display['taux_remboursement'] = df_atc1_display['taux_remboursement'].apply(lambda x: f"{x:.1f}%")
            df_atc1_display['BOITES'] = df_atc1_display['BOITES'].apply(lambda x: f"{x:,}".replace(',', ' '))
            
            df_atc1_display.columns = ['Code ATC1', 'Libell√© ATC1', 'Montant Rembours√©', 'Base Remboursable', 'Bo√Ætes', 'Co√ªt/Bo√Æte', 'Taux Remb.']
            
            st.dataframe(df_atc1_display, use_container_width=True)
            
            # Graphique en secteurs pour ATC1
            if st.checkbox("üìä Afficher le graphique en secteurs ATC1", key="chart_atc1"):
                fig_pie = px.pie(
                    df_atc1, 
                    values='REM', 
                    names='L_ATC1',
                    title="R√©partition des Remboursements par Classification ATC1"
                )
                fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig_pie, use_container_width=True)
            
            # Export CSV
            csv_atc1 = df_atc1_display.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger les donn√©es ATC1",
                data=csv_atc1,
                file_name=f"atc1_phmev_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                key="download_atc1"
            )
        else:
            st.warning("Aucune donn√©e de classification disponible avec les filtres s√©lectionn√©s")
    
    with tab6:
        st.subheader("üìã Donn√©es D√©taill√©es")
        
        if len(df_filtered) > 0:
            # Options d'affichage
            col_opt1, col_opt2, col_opt3 = st.columns(3)
            with col_opt1:
                nb_lignes = st.selectbox("Nombre de lignes √† afficher", [100, 500, 1000, 5000], index=0)
            with col_opt2:
                colonnes_essentielles = st.checkbox("Afficher colonnes essentielles uniquement", value=True)
            with col_opt3:
                trier_par = st.selectbox("Trier par", ['REM', 'BSE', 'BOITES', 'cout_par_boite'], index=0)
            
            # S√©lection des colonnes
            if colonnes_essentielles:
                colonnes = ['etablissement', 'medicament', 'ville', 'categorie', 'REM', 'BSE', 'BOITES', 'cout_par_boite', 'taux_remboursement']
            else:
                colonnes = df_filtered.columns.tolist()
            
            # Tri et limitation
            df_detail = df_filtered[colonnes].sort_values(trier_par, ascending=False).head(nb_lignes)
            
            # Formatage pour affichage
            df_detail_display = df_detail.copy()
            if 'REM' in df_detail_display.columns:
                df_detail_display['REM'] = df_detail_display['REM'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            if 'BSE' in df_detail_display.columns:
                df_detail_display['BSE'] = df_detail_display['BSE'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            if 'cout_par_boite' in df_detail_display.columns:
                df_detail_display['cout_par_boite'] = df_detail_display['cout_par_boite'].apply(lambda x: f"{x:,.2f}‚Ç¨".replace(',', ' ').replace('.', ',').replace(' ', '.'))
            if 'taux_remboursement' in df_detail_display.columns:
                df_detail_display['taux_remboursement'] = df_detail_display['taux_remboursement'].apply(lambda x: f"{x:.1f}%")
            if 'BOITES' in df_detail_display.columns:
                df_detail_display['BOITES'] = df_detail_display['BOITES'].apply(lambda x: f"{x:,}".replace(',', ' '))
            
            st.dataframe(df_detail_display, use_container_width=True)
            
            # Export CSV complet
            csv_detail = df_filtered.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger toutes les donn√©es filtr√©es",
                data=csv_detail,
                file_name=f"donnees_completes_phmev_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
                key="download_detail"
            )
            
            # Statistiques du dataset
            st.write("### üìä Statistiques du Dataset Filtr√©")
            
            col_stat1, col_stat2 = st.columns(2)
            
            with col_stat1:
                st.markdown(f"""
                <div class="info-box">
                    <h4>üìà Statistiques G√©n√©rales</h4>
                    <ul>
                        <li><strong>Lignes totales:</strong> {len(df_filtered):,}</li>
                        <li><strong>√âtablissements uniques:</strong> {df_filtered['etablissement'].nunique():,}</li>
                        <li><strong>M√©dicaments uniques:</strong> {df_filtered['medicament'].nunique():,}</li>
                        <li><strong>Villes uniques:</strong> {df_filtered['ville'].nunique():,}</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            with col_stat2:
                st.markdown(f"""
                <div class="success-box">
                    <h4>üí∞ Statistiques Financi√®res</h4>
                    <ul>
                        <li><strong>Montant total rembours√©:</strong> {format_currency(df_filtered['REM'].sum())}</li>
                        <li><strong>Base remboursable totale:</strong> {format_currency(df_filtered['BSE'].sum())}</li>
                        <li><strong>Bo√Ætes totales:</strong> {format_number(df_filtered['BOITES'].sum())}</li>
                        <li><strong>Co√ªt moyen par bo√Æte:</strong> {format_currency(df_filtered['cout_par_boite'].mean())}</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.warning("Aucune donn√©e disponible avec les filtres s√©lectionn√©s")
    
    # Footer avec informations BigQuery
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 1rem;">
        <p>üè• <strong>PHMEV Analytics Pro - BigQuery Edition</strong></p>
        <p>‚ö° Powered by Google BigQuery | üöÄ Performance maximale pour l'analyse de donn√©es pharmaceutiques</p>
        <p><small>üìä Donn√©es PHMEV 2024 | Interface d√©velopp√©e avec Streamlit</small></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
