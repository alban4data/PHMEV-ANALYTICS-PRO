#!/usr/bin/env python3
"""
Test des combinaisons de filtres pour l'application PHMEV
V√©rifie que les filtres fonctionnent correctement en combinaison
"""

import sys
import os
from datetime import datetime
import pandas as pd

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_atc_hierarchy_combinations():
    """Test des combinaisons hi√©rarchiques ATC"""
    print("üß™ Test: Combinaisons hi√©rarchiques ATC...")
    try:
        from filter_cache_embedded import get_embedded_cache
        cache = get_embedded_cache()
        
        # Test 1: ATC1 -> ATC2 coh√©rence
        atc1_codes = [code for code, _ in cache.get('atc1', [])]
        atc2_data = cache.get('atc2', [])
        
        if atc1_codes and atc2_data:
            # Prendre le premier ATC1 et v√©rifier ses ATC2
            test_atc1 = atc1_codes[0]  # Ex: 'A'
            related_atc2 = [code for code, _ in atc2_data if code.startswith(test_atc1)]
            
            print(f"‚úÖ ATC1 '{test_atc1}' -> {len(related_atc2)} codes ATC2 associ√©s")
            
            if related_atc2:
                # Test 2: ATC2 -> ATC3 coh√©rence
                test_atc2 = related_atc2[0]
                atc3_data = cache.get('atc3', [])
                related_atc3 = [code for code, _ in atc3_data if code.startswith(test_atc2)]
                
                print(f"‚úÖ ATC2 '{test_atc2}' -> {len(related_atc3)} codes ATC3 associ√©s")
                
                if related_atc3:
                    # Test 3: ATC3 -> ATC4 coh√©rence
                    test_atc3 = related_atc3[0]
                    atc4_data = cache.get('atc4', [])
                    related_atc4 = [code for code, _ in atc4_data if code.startswith(test_atc3)]
                    
                    print(f"‚úÖ ATC3 '{test_atc3}' -> {len(related_atc4)} codes ATC4 associ√©s")
                    
                    if related_atc4:
                        # Test 4: ATC4 -> ATC5 coh√©rence
                        test_atc4 = related_atc4[0]
                        atc5_data = cache.get('atc5', [])
                        related_atc5 = [code for code, _ in atc5_data if code.startswith(test_atc4)]
                        
                        print(f"‚úÖ ATC4 '{test_atc4}' -> {len(related_atc5)} codes ATC5 associ√©s")
        
        print("‚úÖ Hi√©rarchie ATC coh√©rente")
        return True
    except Exception as e:
        print(f"‚ùå Erreur hi√©rarchie ATC: {e}")
        return False

def test_filter_combination_logic():
    """Test la logique de combinaison des filtres"""
    print("\nüß™ Test: Logique de combinaison des filtres...")
    try:
        from filter_cache_embedded import get_embedded_cache
        cache = get_embedded_cache()
        
        # Simuler des combinaisons de filtres
        test_combinations = [
            # Combinaison 1: ATC1 + Ville
            {
                'atc1': ['A'],  # Syst√®me digestif
                'villes': ['PARIS'],
                'description': 'ATC1 + Ville'
            },
            # Combinaison 2: ATC1 + ATC2 + Cat√©gorie
            {
                'atc1': ['A'],
                'atc2': ['A01'],
                'categories': ['CHU'],
                'description': 'ATC1 + ATC2 + Cat√©gorie'
            },
            # Combinaison 3: Recherche m√©dicament + √âtablissement
            {
                'medicaments': ['CABOMETYX 20 MG CPR 30'],
                'etablissements': ['INSTITUT GUSTAVE ROUSSY'],
                'description': 'M√©dicament + √âtablissement'
            }
        ]
        
        for i, combo in enumerate(test_combinations, 1):
            desc = combo.pop('description')
            print(f"  Test {i}: {desc}")
            
            # V√©rifier que les valeurs existent dans le cache
            valid_combo = True
            for filter_type, values in combo.items():
                cache_key = filter_type
                if cache_key in cache:
                    cache_values = cache[cache_key]
                    
                    # Pour les ATC, v√©rifier les codes
                    if filter_type.startswith('atc'):
                        cache_codes = [code for code, _ in cache_values]
                        for value in values:
                            if value not in cache_codes:
                                print(f"    ‚ö†Ô∏è  {filter_type} '{value}' non trouv√©")
                                valid_combo = False
                            else:
                                print(f"    ‚úÖ {filter_type} '{value}' trouv√©")
                    else:
                        # Pour les autres filtres, v√©rifier directement
                        for value in values:
                            if value not in cache_values:
                                print(f"    ‚ö†Ô∏è  {filter_type} '{value}' non trouv√©")
                                valid_combo = False
                            else:
                                print(f"    ‚úÖ {filter_type} '{value}' trouv√©")
                else:
                    print(f"    ‚ùå Cache key '{cache_key}' non trouv√©")
                    valid_combo = False
            
            if valid_combo:
                print(f"    ‚úÖ Combinaison {i} valide")
            else:
                print(f"    ‚ö†Ô∏è  Combinaison {i} partiellement valide")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur combinaisons: {e}")
        return False

def test_dynamic_filtering_simulation():
    """Simuler le filtrage dynamique"""
    print("\nüß™ Test: Simulation du filtrage dynamique...")
    try:
        from filter_cache_embedded import get_embedded_cache
        cache = get_embedded_cache()
        
        # Simuler une s√©quence de filtrage comme dans l'app
        print("  S√©quence: S√©lection ATC1 -> Mise √† jour ATC2 -> S√©lection ATC2")
        
        # √âtape 1: S√©lectionner un ATC1
        atc1_data = cache.get('atc1', [])
        if atc1_data:
            selected_atc1 = atc1_data[0][0]  # Premier code ATC1
            print(f"  1. ATC1 s√©lectionn√©: {selected_atc1}")
            
            # √âtape 2: Filtrer ATC2 bas√© sur ATC1
            atc2_data = cache.get('atc2', [])
            filtered_atc2 = [item for item in atc2_data if item[0].startswith(selected_atc1)]
            print(f"  2. ATC2 filtr√©s: {len(filtered_atc2)} options disponibles")
            
            if filtered_atc2:
                # √âtape 3: S√©lectionner un ATC2
                selected_atc2 = filtered_atc2[0][0]
                print(f"  3. ATC2 s√©lectionn√©: {selected_atc2}")
                
                # √âtape 4: Filtrer ATC3 bas√© sur ATC2
                atc3_data = cache.get('atc3', [])
                filtered_atc3 = [item for item in atc3_data if item[0].startswith(selected_atc2)]
                print(f"  4. ATC3 filtr√©s: {len(filtered_atc3)} options disponibles")
                
                print("  ‚úÖ S√©quence de filtrage dynamique simul√©e avec succ√®s")
            else:
                print("  ‚ö†Ô∏è  Aucun ATC2 trouv√© pour l'ATC1 s√©lectionn√©")
        else:
            print("  ‚ùå Aucun ATC1 disponible")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur filtrage dynamique: {e}")
        return False

def test_search_with_filters():
    """Test de la recherche combin√©e avec des filtres"""
    print("\nüß™ Test: Recherche + Filtres combin√©s...")
    try:
        from filter_cache_embedded import get_embedded_cache
        cache = get_embedded_cache()
        
        # Test 1: Recherche m√©dicament + filtre ville
        medicaments = cache.get('medicaments', [])
        villes = cache.get('villes', [])
        
        # Rechercher CABOMETYX
        cabometyx_meds = [med for med in medicaments if 'cabometyx' in med.lower()]
        if cabometyx_meds:
            print(f"  ‚úÖ Recherche 'cabometyx': {len(cabometyx_meds)} r√©sultats")
            
            # Simuler un filtre ville (Paris par exemple)
            if 'PARIS' in villes:
                print("  ‚úÖ Filtre ville 'PARIS' disponible")
                print("  ‚úÖ Combinaison recherche + filtre ville possible")
            else:
                print("  ‚ö†Ô∏è  Ville 'PARIS' non disponible pour test")
        else:
            print("  ‚ö†Ô∏è  Aucun m√©dicament 'cabometyx' trouv√©")
        
        # Test 2: Recherche √©tablissement + filtre cat√©gorie
        etablissements = cache.get('etablissements', [])
        categories = cache.get('categories', [])
        
        # Rechercher CHU
        chu_etabs = [etab for etab in etablissements if 'chu' in etab.lower()]
        if chu_etabs:
            print(f"  ‚úÖ Recherche 'chu': {len(chu_etabs)} r√©sultats")
            
            # V√©rifier les cat√©gories disponibles
            if categories:
                print(f"  ‚úÖ {len(categories)} cat√©gories disponibles pour filtrage")
                print("  ‚úÖ Combinaison recherche √©tablissement + filtre cat√©gorie possible")
            else:
                print("  ‚ö†Ô∏è  Aucune cat√©gorie disponible")
        else:
            print("  ‚ö†Ô∏è  Aucun √©tablissement 'chu' trouv√©")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur recherche + filtres: {e}")
        return False

def test_edge_cases():
    """Test des cas limites"""
    print("\nüß™ Test: Cas limites...")
    try:
        from filter_cache_embedded import get_embedded_cache
        cache = get_embedded_cache()
        
        # Test 1: Filtres vides
        empty_filters = {
            'atc1': [],
            'atc2': [],
            'villes': [],
            'medicaments': []
        }
        print("  ‚úÖ Filtres vides g√©r√©s (pas de crash)")
        
        # Test 2: Valeurs inexistantes
        invalid_filters = {
            'atc1': ['INEXISTANT'],
            'villes': ['VILLE_INEXISTANTE'],
            'medicaments': ['MEDICAMENT_INEXISTANT']
        }
        
        for filter_type, values in invalid_filters.items():
            cache_data = cache.get(filter_type, [])
            if filter_type.startswith('atc'):
                cache_values = [code for code, _ in cache_data]
            else:
                cache_values = cache_data
            
            found = any(val in cache_values for val in values)
            if not found:
                print(f"  ‚úÖ Valeur inexistante '{values[0]}' correctement non trouv√©e")
            else:
                print(f"  ‚ö†Ô∏è  Valeur '{values[0]}' trouv√©e de mani√®re inattendue")
        
        # Test 3: Caract√®res sp√©ciaux dans la recherche
        special_chars = ['@', '#', '%', '&', '*']
        medicaments = cache.get('medicaments', [])
        
        for char in special_chars:
            matches = [med for med in medicaments if char in med]
            if matches:
                print(f"  ‚ö†Ô∏è  Caract√®re sp√©cial '{char}' trouv√© dans {len(matches)} m√©dicaments")
            else:
                print(f"  ‚úÖ Caract√®re sp√©cial '{char}' correctement absent")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur cas limites: {e}")
        return False

def run_combination_tests():
    """Ex√©cuter tous les tests de combinaisons"""
    print("üöÄ TESTS DES COMBINAISONS DE FILTRES - PHMEV")
    print("=" * 60)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    tests = [
        ("Hi√©rarchie ATC", test_atc_hierarchy_combinations),
        ("Logique combinaisons", test_filter_combination_logic),
        ("Filtrage dynamique", test_dynamic_filtering_simulation),
        ("Recherche + Filtres", test_search_with_filters),
        ("Cas limites", test_edge_cases)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS DE COMBINAISONS")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    failed = len(results) - passed
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:.<35} {status}")
    
    print("-" * 60)
    print(f"Total: {len(results)} tests | R√©ussis: {passed} | √âchou√©s: {failed}")
    
    if failed == 0:
        print("üéâ TOUTES LES COMBINAISONS FONCTIONNENT !")
        print("‚úÖ L'application est pr√™te pour tous les sc√©narios d'usage")
    else:
        print(f"‚ö†Ô∏è  {failed} test(s) de combinaison √©chou√©(s)")
        print("üîß V√©rification des filtres dynamiques recommand√©e")
    
    print("=" * 60)
    return failed == 0

if __name__ == "__main__":
    success = run_combination_tests()
    sys.exit(0 if success else 1)
