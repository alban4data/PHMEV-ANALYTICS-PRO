"""
Application Streamlit pour l'analyse des donn√©es PHMEV ANONYMIS√âES
Analyse des d√©livrances pharmaceutiques par √©tablissement
Version adapt√©e pour donn√©es Open PHMEV avec produits anonymis√©s
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="Analyse PHMEV - Donn√©es Anonymis√©es",
    page_icon="üíä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ffc107;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data(nrows=1000000):
    """Charge les donn√©es PHMEV avec cache"""
    try:
        df = pd.read_csv(
            'OPEN_PHMEV_2024.CSV', 
            nrows=nrows, 
            encoding='latin1', 
            sep=';',
            low_memory=False
        )
        
        # Nettoyage des donn√©es
        df['REM'] = pd.to_numeric(df['REM'].astype(str).str.replace(',', '.'), errors='coerce')
        df['BSE'] = pd.to_numeric(df['BSE'].astype(str).str.replace(',', '.'), errors='coerce')
        
        # Cr√©ation de colonnes d√©riv√©es pour faciliter l'analyse
        df['etablissement'] = df['nom_etb'].fillna(df['raison_sociale_etb'])
        df['categorie'] = df['categorie_jur'].fillna('Non sp√©cifi√©e')
        df['ville'] = df['nom_ville'].fillna('Non sp√©cifi√©e')
        
        return df
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {e}")
        return None

def format_number(value):
    """Formate les nombres avec des s√©parateurs de milliers"""
    if pd.isna(value):
        return "N/A"
    if value >= 1_000_000:
        return f"{value/1_000_000:.1f}M"
    elif value >= 1_000:
        return f"{value/1_000:.1f}K"
    else:
        return f"{value:,.0f}"

def format_currency(value):
    """Formate les montants en euros"""
    if pd.isna(value):
        return "N/A"
    if value >= 1_000_000:
        return f"{value/1_000_000:.1f}M‚Ç¨"
    elif value >= 1_000:
        return f"{value/1_000:.1f}K‚Ç¨"
    else:
        return f"{value:,.2f}‚Ç¨"

def main():
    # En-t√™te principal
    st.markdown('<h1 class="main-header">üìä Analyse PHMEV - Donn√©es Anonymis√©es</h1>', 
                unsafe_allow_html=True)
    
    # Avertissement sur les donn√©es anonymis√©es
    st.markdown("""
    <div class="warning-box">
        <strong>‚ö†Ô∏è Donn√©es Anonymis√©es</strong><br>
        Ce fichier OPEN_PHMEV contient des donn√©es anonymis√©es :
        <ul>
            <li><strong>M√©dicaments :</strong> "Non restitu√©" (noms anonymis√©s)</li>
            <li><strong>Codes CIP/ATC :</strong> Valeurs g√©n√©riques (9999...)</li>
            <li><strong>Analyse possible :</strong> √âtablissements, cat√©gories, g√©ographie</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Chargement des donn√©es
    with st.spinner("Chargement des donn√©es PHMEV anonymis√©es..."):
        df = load_data()
    
    if df is None:
        st.stop()
    
    st.success(f"‚úÖ Donn√©es charg√©es: {len(df):,} lignes")
    
    # Sidebar - Filtres
    st.sidebar.markdown("## üîç Filtres Disponibles")
    st.sidebar.info("üîí Les produits sont anonymis√©s dans ce dataset")
    
    # Filtre par cat√©gorie d'√©tablissement
    categories_uniques = sorted(df['categorie'].dropna().unique())
    categorie_filtre = st.sidebar.multiselect(
        "Cat√©gories d'√©tablissement",
        options=categories_uniques,
        default=[],
        help="Filtrer par type juridique d'√©tablissement"
    )
    
    # Filtre par ville
    villes_uniques = sorted(df['ville'].dropna().unique())
    if len(villes_uniques) > 100:
        ville_search = st.sidebar.text_input(
            "Rechercher une ville",
            help="Tapez pour filtrer les villes"
        )
        if ville_search:
            villes_filtered = [v for v in villes_uniques 
                             if ville_search.lower() in v.lower()][:50]
        else:
            villes_filtered = villes_uniques[:50]
    else:
        villes_filtered = villes_uniques
    
    ville_filtre = st.sidebar.multiselect(
        "Villes",
        options=villes_filtered,
        default=[],
        help="Filtrer par ville"
    )
    
    # Filtre par √©tablissement
    etablissements_uniques = sorted(df['etablissement'].dropna().unique())
    if len(etablissements_uniques) > 100:
        st.sidebar.info("‚ö†Ô∏è Plus de 100 √©tablissements. Utilisez la recherche.")
        etablissement_search = st.sidebar.text_input(
            "Rechercher un √©tablissement",
            help="Tapez pour filtrer les √©tablissements"
        )
        if etablissement_search:
            etablissements_filtered = [e for e in etablissements_uniques 
                                     if etablissement_search.lower() in e.lower()][:50]
        else:
            etablissements_filtered = etablissements_uniques[:50]
    else:
        etablissements_filtered = etablissements_uniques
    
    etablissement_filtre = st.sidebar.multiselect(
        "√âtablissements",
        options=etablissements_filtered,
        default=[],
        help="Filtrer par √©tablissement sp√©cifique"
    )
    
    # Filtre Top N
    top_n = st.sidebar.slider(
        "Top N √©tablissements",
        min_value=5,
        max_value=100,
        value=20,
        step=5,
        help="Nombre d'√©tablissements √† afficher"
    )
    
    # Application des filtres
    df_filtered = df.copy()
    
    if categorie_filtre:
        df_filtered = df_filtered[df_filtered['categorie'].isin(categorie_filtre)]
    
    if ville_filtre:
        df_filtered = df_filtered[df_filtered['ville'].isin(ville_filtre)]
    
    if etablissement_filtre:
        df_filtered = df_filtered[df_filtered['etablissement'].isin(etablissement_filtre)]
    
    if len(df_filtered) == 0:
        st.warning("‚ö†Ô∏è Aucune donn√©e ne correspond aux filtres s√©lectionn√©s.")
        st.stop()
    
    # M√©triques globales
    st.markdown("## üìà M√©triques Globales")
    
    col1, col2, col3, col4 = st.columns(4)
    
    total_boites = df_filtered['BOITES'].sum()
    total_rem = df_filtered['REM'].sum()
    total_bse = df_filtered['BSE'].sum()
    nb_etablissements = df_filtered['etablissement'].nunique()
    
    with col1:
        st.metric(
            "Total Bo√Ætes",
            format_number(total_boites),
            help="Nombre total de bo√Ætes d√©livr√©es"
        )
    
    with col2:
        st.metric(
            "Montant Rembours√©",
            format_currency(total_rem),
            help="Montant total rembours√©"
        )
    
    with col3:
        st.metric(
            "Montant Remboursable",
            format_currency(total_bse),
            help="Montant total remboursable"
        )
    
    with col4:
        st.metric(
            "√âtablissements",
            f"{nb_etablissements:,}",
            help="Nombre d'√©tablissements uniques"
        )
    
    # Analyse par √©tablissement
    st.markdown(f"## üè• Top {top_n} √âtablissements")
    
    # Agr√©gation par √©tablissement
    df_etb = df_filtered.groupby(['etablissement', 'categorie', 'ville']).agg({
        'BOITES': 'sum',
        'REM': 'sum',
        'BSE': 'sum'
    }).reset_index()
    
    # Calcul des pourcentages
    df_etb['pct_boites'] = (df_etb['BOITES'] / total_boites * 100).round(2)
    df_etb['pct_rem'] = (df_etb['REM'] / total_rem * 100).round(2)
    df_etb['pct_bse'] = (df_etb['BSE'] / total_bse * 100).round(2)
    
    # Tri et s√©lection du top N
    df_top = df_etb.nlargest(top_n, 'BOITES')
    
    # Tableau d√©taill√©
    st.markdown("### üìã Tableau d√©taill√©")
    
    # Formatage du tableau
    df_display = df_top.copy()
    df_display['Bo√Ætes'] = df_display['BOITES'].apply(format_number)
    df_display['% Bo√Ætes'] = df_display['pct_boites'].apply(lambda x: f"{x}%")
    df_display['Rembours√©'] = df_display['REM'].apply(format_currency)
    df_display['% Rembours√©'] = df_display['pct_rem'].apply(lambda x: f"{x}%")
    df_display['Remboursable'] = df_display['BSE'].apply(format_currency)
    df_display['% Remboursable'] = df_display['pct_bse'].apply(lambda x: f"{x}%")
    
    table_display = df_display[['etablissement', 'ville', 'categorie', 'Bo√Ætes', '% Bo√Ætes', 
                               'Rembours√©', '% Rembours√©', 'Remboursable', '% Remboursable']]
    table_display.columns = ['√âtablissement', 'Ville', 'Cat√©gorie', 'Bo√Ætes', '% Bo√Ætes', 
                            'Rembours√©', '% Remb.', 'Remboursable', '% Rembours.']
    
    st.dataframe(
        table_display,
        use_container_width=True,
        hide_index=True
    )
    
    # Visualisations
    st.markdown("### üìä Visualisations")
    
    # Graphique en barres - Top √©tablissements
    fig_bars = px.bar(
        df_top.head(15),
        x='BOITES',
        y='etablissement',
        color='categorie',
        title=f"Top 15 √âtablissements par Nombre de Bo√Ætes",
        labels={'BOITES': 'Nombre de Bo√Ætes', 'etablissement': '√âtablissement'},
        orientation='h'
    )
    fig_bars.update_layout(height=600, yaxis={'categoryorder': 'total ascending'})
    st.plotly_chart(fig_bars, use_container_width=True)
    
    # Graphiques en secteurs
    col1, col2 = st.columns(2)
    
    with col1:
        # R√©partition par cat√©gorie
        df_cat = df_filtered.groupby('categorie')['BOITES'].sum().reset_index()
        df_cat = df_cat.nlargest(8, 'BOITES')
        
        fig_pie_cat = px.pie(
            df_cat,
            values='BOITES',
            names='categorie',
            title="R√©partition par Cat√©gorie d'√âtablissement"
        )
        st.plotly_chart(fig_pie_cat, use_container_width=True)
    
    with col2:
        # R√©partition des montants
        montants_data = pd.DataFrame({
            'Type': ['Montant Rembours√©', 'Montant Remboursable'],
            'Montant': [total_rem, total_bse]
        })
        
        fig_pie_montant = px.pie(
            montants_data,
            values='Montant',
            names='Type',
            title="Rembours√© vs Remboursable",
            color_discrete_sequence=['#ff7f0e', '#1f77b4']
        )
        st.plotly_chart(fig_pie_montant, use_container_width=True)
    
    # Section d'export
    st.markdown("## üíæ Export des Donn√©es")
    
    csv_data = df_top.to_csv(index=False, encoding='utf-8-sig', sep=';')
    st.download_button(
        label="üì• T√©l√©charger Top √âtablissements (CSV)",
        data=csv_data,
        file_name=f"top_{top_n}_etablissements_phmev_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
        mime="text/csv"
    )
    
    # Informations sur les donn√©es
    with st.expander("‚ÑπÔ∏è Informations sur les donn√©es anonymis√©es"):
        st.markdown(f"""
        **Donn√©es charg√©es:** {len(df):,} lignes  
        **Donn√©es apr√®s filtrage:** {len(df_filtered):,} lignes  
        **Source:** OPEN_PHMEV_2024.CSV (donn√©es anonymis√©es)
        
        **‚ö†Ô∏è Limitations dues √† l'anonymisation:**
        - **M√©dicaments:** Noms remplac√©s par "Non restitu√©"
        - **Codes produits:** CIP et ATC anonymis√©s (9999...)
        - **Analyse possible:** √âtablissements, cat√©gories, g√©ographie
        
        **M√©triques disponibles:**
        - **BOITES:** Nombre de bo√Ætes d√©livr√©es
        - **REM:** Montant rembours√© (‚Ç¨)
        - **BSE:** Montant remboursable (‚Ç¨)
        
        Cette version est adapt√©e aux donn√©es Open PHMEV publiques anonymis√©es.
        """)

if __name__ == "__main__":
    main()